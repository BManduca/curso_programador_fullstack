Versões do ECMAScript => JavaScript Moderno (ES6+)
  - É o nome oficial do JavaScript
  - "JavaScript" já estava patenteado
  - ECMA(European Computer Manufacture Association) é uma associação
  de padronização de sistemas de informação.

- Evolução das versões:
  - Até o momento estamos na versão ES8(EcmaScript 8)
  - Lançada em 2017
  - Antes da ES8 tivemos:
    - ES7 em 2016
    - ES6 em 2015
    - ES5 em 2009

- Compatibilidades
  - O JavaScript não teve uma evolução consistente
    - Grande espaço de lançamento entre as versões 5 e a 6
    - Houve uma versão 3 em 1999 e uma 4 que nunca foi lançada

  - A versão 6(2015) veio com muitas novidades
  - Temos ainda o problema de suporte dos navegadores
    - As versões já lançadas nunca conseguirão suportar as 
    versões mais novas do JS.

  - Surge a necessidade de ferramentas que convertam para as versões do JS
    - Que possibilita que nós, enquanto desenvolvedores, possamos utilizar
    as versões mais recentes.
    - Que não impeça o código de executar em navegadores que ainda não 
    suportam.

  - Temos uma ferramenta que nos auxilia a ver como esta a evolução dos 
  navegadores.
    - caniuse.com
      - bem importante quando lidamos com a programação voltada para o front-end


- Interpolação de String

  - Uma string pode ser representada por dois ``, embora não seja comum em todas as linguagens...
  veremos uma utilidade dessa funcionalidade, através da Interpolação de strings


- Desestruturação de Objetos e Arrays
  - Desestruturação é uma expressão JS que possibilita extrair dados de arrays e objetos em variáveis 
  distintas 

  - Para os arrays, é bem semelhante com objetos, so é necessário colocar as variáveis na mesma ordem dos 
  índices que se quer extrair


- Operador Spread 
  - Recurso disponível apartir do ES6, que permite expandir os elementos de um objeto iterável
  - Objeto iterável, é aquele que conseguimos percorrer elemento a elemento, como a string e os arrays.

- Rest param
  - O operador spread, tem uma utilidade de fazer com que uma função um número 
  indeterminado de parâmetros e isso é o rest params.
  - consegue estruturar todo um conteúdo em um array

- O que é NodeJS e como instalar
  - Interpretador de código JS
  - Criado por Ryan Dahl em 2009
  - Utiliza como motor o interpretador JavaScript V8 da Google
    - permite que criamos códigos que serão executados fora do Browser
    - Seja no terminal, backend de uma aplicação, etc...
  - Conseguimos utilizar tudo que aprendemos sobre JavaScript

  - Existem ferramentas que são importantes e auxiliam no desenvolvimento front-end e que foram desenvolvidas em NodeJS,
  ou seja, existem ferramentas que foram desenvolvidas em JavaScript que suporta o desenvolvimento também em JavaScript



  - No terminal:
    - sudo apt ou apt-get install curl
    - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -

    - sudo apt install -y nodejs

    - verificando versão do NodeJS => node -v



- JSON
  - JSON significa JavaScript Object Notation
  - Um formato de representação de dados no formato texto
  - Ele é derivado da forma como os objetos do JS são organizados 

  - Por que usar?
    - Diferentes sistemas precisam se comunicar
      - É necessário que exista um padrão para que possam mandar dados um para o outro

    - JSON é um formato bem compacto e altamente adotado

    - Pode ser um texto salvo num arquivo
      - geralmente num arquivo com formato .json

    - Ou até mesmo numa string


  Exemplo:

    {
      "name": "Terra",
      "physicalCharacteristics": {
          "surfaceArea": 510072000,
          "equatorialDiameter": 12756.2
      },
      "colors": ["Azul", "Branco", "Marrom"],
      "startRotation": "00:00",
      "finishRotation": "23:59"
    }

    - O JS tem um classe que é chamada de JSON.parse, onde ela converte um texto JSON em um objeto.json

      ficando assim => JSON.parse(aqui_o_texto_json)

- NPM e Yarn
  - O yarn e o npm são dois gerenciadores de pacotes do Javascript.
    - NPM vem de Node Package Manager

  - O Yarn surgiu em contrapartida ao NPM, que apresentava problemas de performance
    - Criado pelo Facebook

  - Com o surgimento do Yarn, o NPM melhorou e vários destes problemas foram resolvidos


  - Mas o que é um gerenciador de pacotes??
    - É uma ferramenta responsável por gerenciar as depêndencias da aplicação
    - Conseguimos instalar dependências(pacotes) pela linha de comando
    - Permite que mantenhamos as versões necessárias das ferramentas para a aplicação
    

  - Npm é uma ferramenta que possui 3 recursos:
    - Uma ferramenta de linha de comando para instalar pacotes
    - Repositório de pacotes Javascript
      - Quando executamos um comando de instalação, o NPM busca o próprio repositório
    - Site para pesquisa sobre documentação de um pacote

      exemplo: npmjs.com/package/moment

      - o NPM já vem instalado junto do Javascript
        - verificando versão: npm --version

  - NPM init e instalações de pacotes
    - para instalar biblioteca no projeto e colocar como dependência, faremos
    da seguinte forma: 
      - npm install (nome_biblioteca) --save
        - o save serve para adicionar a biblioteca como dependência no 
        projeto

  - Transpilação com Babel
    - Transpilar é converter o código que está numa linguagem para outra
    - Babel é utilizado para isso
      - Converte o código numa versão do ECMA para outras versões anteriores
    - Desenvolvido em JavaScript
    - Utilizado para permitir compatibilidade com navegadores que ainda não suportam
    determinadas versões.

    - instalando o pacote do babel:
      - npm install @babel/core @babel/cli @babel/preset-env --save-dev
        - core: a base para o funcionamento do babel
        - cli: para utilizar o babel por linha de comando
        - preset-env: pacote para converter qualquer versão do ES6 ou superior para o 
        ES5 e quando utilizamos o --save-dev, é incluso o pacote que instalamos 
        apenas no dev-dependencies no package.json, isso porque 
        ele não é um pacote utilizado em prod


- babel.config.js e .babelrc

  - arquivos de configuração do Babel
  - Babel 7 foi lançado em 2018
  - Antes possuia como arquivo de configuração apenas o .babelrc
  - No 7, passou a ser recomendada a utilização do babel.config.js

  - babel.config.js
    - é um arquivo JavaScript
    - configuramos os presets, plugins e etc
    - Lido no momento de converter os arquivos
    - É utilizado na Raiz do projeto para as configurações padrões

  -.babelrc
    - É um arquivo JSON
    - Configuramos os presets, plugins e etc.
    - Lido no momento de converter os arquivos
    - É utilizado em subdiretórios para sobrescrever os 
    valores padrões que vem no babel.config.js


  - informações:
    - para instalar uma versão de um pacote em especifico, podemos 
    fazer da seguinte forma: npm install core-js@3 --save

- NPX e NPM Scripts
  - ao usar o comando npx no terminal, na verdade estamos colocando 
  um atalho para ./node_modules/.bin/... e a ferramenta que queremos 
  executar

- Desvendando o Webpack
  - É uma ferramenta conhecida como static module bundler
  - Lê todo o código e monta um gráfico de dependências
  - Este gráfico é utilizado par montar os pacotes de código para ser utilizado
  no front-end
  - A idéia é ter todo o código modularizado no JS
    - Através do código e do arquivo de configuração do Webpack
  - Possui espaço para plugins e loaders
    - Permite incluir outros tipos de arquivos além do JS ou 
    transpilar os arquivos JS com o Babel
  - Tudo no Webpack é configurado num arquivo webpack.config.js(nome padrão)