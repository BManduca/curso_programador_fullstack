 - React
    = Uma das bibliotecas mais conhecidas no mercado de trabalho

    - React é "uma biblioteca JavaScript declarativa, eficiente e flexível 
    para a criação de interfaces do usuário(UI)"

    - Surgiu em 2011 no facebook

    - Características
        - É uma biblioteca, não um framework
            - O React resolve um problema digamos significavelmente 
            simples, que é a questão de exibição das informações na tela
        - É baseado em Components
        - É usado para criar SPAs

    - React é feito com JavaScript

    - React é eficiente(Virtual DOM)

    - O React pode ser utilizados para criar APPS mobile com o React Native

    - React é a biblioteca de criação de interfaces mais popular e é utilizado em grandes empresas:
        - Facebook
        - Instagram
        - WhatsApp
        - Netflix
        - Dropbox

    - O que são Components e porque eles são importantes?
        - O React é uma biblioteca baseada no conceito de Components
        - Os Components permitem dividir a interface do Usuário em partes 
        independentes e reutilizáveis
        - Components são como funções JavaScript, onde:
            - Aceitam entradas arbitrárias (chamadas **props**)
            - Retorna Elementos React e esse elemento posteriormente
            vai ser injetado na tela

        - Existem 2 tipos de Components:
            - Função
                - Mais utilizado
            - Classe(features extras)


            Exemplo:
                function Welcome(props) {
                    return <h1>Hello, {props.name}</h1>;
                }

    - O que é JSX?
        - Um exemplo de código JSX:
            const element = <h1 className="title"> Hello World! </h1>

        - Não é apenas HTML nem JS
        JSX serve para descrever como a nossa User Interface(UI) deve ser
        - JSX não é interpretada pelo browser, por este motivo devemos 
        utilizar um transpiler(em geral, o babel) para realizar essa 
        transpilação
        - Ao constrário do passado, em vez de compilar JavaScript em HTML, 
        o JSX nos permite colocar HTML em JavaScript

        - O código que vimos antes após o trasnpiler se tornará: 
            const element = React.createElement(
                "h1",
                { className: "title" },
                "HelloWorld!"
            )
        - Com esse código preparamos nosso elemento para ser exibido 
        no DOM

    - Vantagens do JSX
        - Similaridade com o HTML
        - Melhor integração entre o HTML e o JavaScript

    - Quem utilizar o JSX??
        - Preact
        - Inferno -> framework JavaScript
        - React Native
        - Vuejs(Opcional)

- O react tem duas maneiras de ser usado
    - como um SPA(Single Page Application) ou seja, toda a interface de usuário
    - Ou também so adicionando ele há a algumas partes do seu projeto

- Como o react atualizar as views
    - DOM(Document Object Model)
        - É um objeto /interface criado pelo Browser que representa a estrutura do nosso 
        documento HTML e que nos dá meios para interagir com ele(usamos em geral 
        o Javascript para fazer isso).

        - Exemplo:
        var myBtn = document.getElementById('btn');

        myBtn.addEventListener('click', function(event) {
            alert('botão pressionado!')
        }, false);

    - Virtual DOM
        É uma representação em Javascript do DOM verdadeiro. Quando alterações e eventos acontecem, 
        primeiro o React atualiza o Virtual DOM, analisa as mudanças e o que precisa ser atualizado
        no DOM, e depois realiza isso conciliando o Virtual DOM e o DOM

    - Porque o React usa o Virtual DOM?
        - Acessar o DOM é mais lento que as operações em JavaScript
        - O Virtual DOM automaticamente encontra a maneira mais economica de atualizar 
        o DOM(atualizando só os demais elementos necessários)

    - Entendendo os elementos:
        - Os menores blocos do React são os elementos, através deles é que descrevemos 
        o que vai aparecer na nossa tela

            const element = <h1>Hello, world</h1>;

        - Diferente dos elementos do DOM, os elementos do React são objetos simples e 
        "baratos" de criar

        - O Virtual DOM é o responsável por atualizar o DOM e exibir esses elementos 
        na tela
        - Para renderizar um elemento, primeiro escolhemos um nó do DOM,
        exemplo:

            <div id="root"></div>

        - Tudo dentro desse nó será atualizado pelo Virtual DOM

        - Agora para inserirmos nosso elemento na tela, podemos rodar:
            const element = <h1>Hello, world</h1>
            ReactDOM.render(element, document.getElementById('root'));

- Gerando nosso primeiro Projeto
    - comando: npx create react-app -> gerador de projetos
    - seguido do nome do projeto

    - node_modules é aonde ficará todas as nossas bibliotecas do node ou 
    qualquer coisa que seja adicionada aqui, como axios, reduce...
    - pasta public ficam os arquivos públicos do nosso site.
        - index.html -> principal tela
        - geralmente vem alguns favicons, logos e tudo mais no projeto
        - a maioria da 'magia' acontece no src
            - aonde permanecem as partes de react do nosso app
            - criado um arquivo js, chamado App, que é nosso component principal
                - é criado com base no jsx
            - index.js, que é aonde é importado o app que foi criado
                - roda o ReactDOM.render(), escolhendo o nó root, definido
                anteriormente.
            
    - package.json
        - para subir o projeto, temos dentro do package.json, que controla as 
        bibliotecas e os scripts
            - temos o script start e para isso rodamos através do 
            comando yarn start, conseguimos subir o servido localmente

- Criando nosso primeiro component
    - inicialmente component é criado através da palavra function
    - podemos criar diversos components e chamar no component 'Pai', 
    desta forma, todos serão acionados quando o projeto for rodado 
    - Para nossos components, podemos passar também parâmetros, que são 
    conhecidos também como props
    - podemos também criar arquivos dentro do próprio src, como components e 
    chamar dentro do component App principal

    -component também pode ser criado através de arrow functions
        const Helloworld = () => {
            ....
        }

    - component de class
            class Helloworld extends React.Component {
                render () {
                    return <h1>Hello World</h1>
                }                
            }
        - o react tem mais ferramentas para este tipo de component


- Agrupando components
    npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

    We suggest that you begin by typing:

    cd agrupando_components
    npm start


 echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p


 - Propriedades e funções puras
    - Função pura:
        function sum(a,b) {
            return a + b;
        }
        - A função recebe duas propriedades a e b
        - A função não altera o valor das entradas
        - Sempre retorna o mesmo resultado para os mesmos tipos de entradas

    - Função impura
        function withdraw(account, amount) {
            account.total -= amount;
        }
        - a função altera o valor de sua entrada

    - Única regra restrita ao React
        - Todos os components React tem que agir como funcões
        puras em relação as suas props

    

