 - React
    = Uma das bibliotecas mais conhecidas no mercado de trabalho

    - React é "uma biblioteca JavaScript declarativa, eficiente e flexível 
    para a criação de interfaces do usuário(UI)"

    - Surgiu em 2011 no facebook

    - Características
        - É uma biblioteca, não um framework
            - O React resolve um problema digamos significavelmente 
            simples, que é a questão de exibição das informações na tela
        - É baseado em Components
        - É usado para criar SPAs

    - React é feito com JavaScript

    - React é eficiente(Virtual DOM)

    - O React pode ser utilizados para criar APPS mobile com o React Native

    - React é a biblioteca de criação de interfaces mais popular e é utilizado em grandes empresas:
        - Facebook
        - Instagram
        - WhatsApp
        - Netflix
        - Dropbox

    - O que são Components e porque eles são importantes?
        - O React é uma biblioteca baseada no conceito de Components
        - Os Components permitem dividir a interface do Usuário em partes 
        independentes e reutilizáveis
        - Components são como funções JavaScript, onde:
            - Aceitam entradas arbitrárias (chamadas **props**)
            - Retorna Elementos React e esse elemento posteriormente
            vai ser injetado na tela

        - Existem 2 tipos de Components:
            - Função
                - Mais utilizado
            - Classe(features extras)


            Exemplo:
                function Welcome(props) {
                    return <h1>Hello, {props.name}</h1>;
                }

    - O que é JSX?
        - Um exemplo de código JSX:
            const element = <h1 className="title"> Hello World! </h1>

        - Não é apenas HTML nem JS
        JSX serve para descrever como a nossa User Interface(UI) deve ser
        - JSX não é interpretada pelo browser, por este motivo devemos 
        utilizar um transpiler(em geral, o babel) para realizar essa 
        transpilação
        - Ao constrário do passado, em vez de compilar JavaScript em HTML, 
        o JSX nos permite colocar HTML em JavaScript

        - O código que vimos antes após o trasnpiler se tornará: 
            const element = React.createElement(
                "h1",
                { className: "title" },
                "HelloWorld!"
            )
        - Com esse código preparamos nosso elemento para ser exibido 
        no DOM

    - Vantagens do JSX
        - Similaridade com o HTML
        - Melhor integração entre o HTML e o JavaScript

    - Quem utilizar o JSX??
        - Preact
        - Inferno -> framework JavaScript
        - React Native
        - Vuejs(Opcional)

- O react tem duas maneiras de ser usado
    - como um SPA(Single Page Application) ou seja, toda a interface de usuário
    - Ou também so adicionando ele há a algumas partes do seu projeto

- Como o react atualizar as views
    - DOM(Document Object Model)
        - É um objeto /interface criado pelo Browser que representa a estrutura do nosso 
        documento HTML e que nos dá meios para interagir com ele(usamos em geral 
        o Javascript para fazer isso).

        - Exemplo:
        var myBtn = document.getElementById('btn');

        myBtn.addEventListener('click', function(event) {
            alert('botão pressionado!')
        }, false);

    - Virtual DOM
        É uma representação em Javascript do DOM verdadeiro. Quando alterações e eventos acontecem, 
        primeiro o React atualiza o Virtual DOM, analisa as mudanças e o que precisa ser atualizado
        no DOM, e depois realiza isso conciliando o Virtual DOM e o DOM

    - Porque o React usa o Virtual DOM?
        - Acessar o DOM é mais lento que as operações em JavaScript
        - O Virtual DOM automaticamente encontra a maneira mais economica de atualizar 
        o DOM(atualizando só os demais elementos necessários)

    - Entendendo os elementos:
        - Os menores blocos do React são os elementos, através deles é que descrevemos 
        o que vai aparecer na nossa tela

            const element = <h1>Hello, world</h1>;

        - Diferente dos elementos do DOM, os elementos do React são objetos simples e 
        "baratos" de criar

        - O Virtual DOM é o responsável por atualizar o DOM e exibir esses elementos 
        na tela
        - Para renderizar um elemento, primeiro escolhemos um nó do DOM,
        exemplo:

            <div id="root"></div>

        - Tudo dentro desse nó será atualizado pelo Virtual DOM

        - Agora para inserirmos nosso elemento na tela, podemos rodar:
            const element = <h1>Hello, world</h1>
            ReactDOM.render(element, document.getElementById('root'));

- Gerando nosso primeiro Projeto
    - comando: npx create react-app -> gerador de projetos
    - seguido do nome do projeto

    - node_modules é aonde ficará todas as nossas bibliotecas do node ou 
    qualquer coisa que seja adicionada aqui, como axios, reduce...
    - pasta public ficam os arquivos públicos do nosso site.
        - index.html -> principal tela
        - geralmente vem alguns favicons, logos e tudo mais no projeto
        - a maioria da 'magia' acontece no src
            - aonde permanecem as partes de react do nosso app
            - criado um arquivo js, chamado App, que é nosso component principal
                - é criado com base no jsx
            - index.js, que é aonde é importado o app que foi criado
                - roda o ReactDOM.render(), escolhendo o nó root, definido
                anteriormente.
            
    - package.json
        - para subir o projeto, temos dentro do package.json, que controla as 
        bibliotecas e os scripts
            - temos o script start e para isso rodamos através do 
            comando yarn start, conseguimos subir o servido localmente

- Criando nosso primeiro component
    - inicialmente component é criado através da palavra function
    - podemos criar diversos components e chamar no component 'Pai', 
    desta forma, todos serão acionados quando o projeto for rodado 
    - Para nossos components, podemos passar também parâmetros, que são 
    conhecidos também como props
    - podemos também criar arquivos dentro do próprio src, como components e 
    chamar dentro do component App principal

    -component também pode ser criado através de arrow functions
        const Helloworld = () => {
            ....
        }

    - component de class
            class Helloworld extends React.Component {
                render () {
                    return <h1>Hello World</h1>
                }                
            }
        - o react tem mais ferramentas para este tipo de component


- Agrupando components
    npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

    We suggest that you begin by typing:

    cd agrupando_components
    npm start


 echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p


 - Propriedades e funções puras
    - Função pura:
        function sum(a,b) {
            return a + b;
        }
        - A função recebe duas propriedades a e b
        - A função não altera o valor das entradas
        - Sempre retorna o mesmo resultado para os mesmos tipos de entradas

    - Função impura
        function withdraw(account, amount) {
            account.total -= amount;
        }
        - a função altera o valor de sua entrada

    - Única regra restrita ao React
        - Todos os components React tem que agir como funcões
        puras em relação as suas props


------------------------------------------------------------------------------

- Criando component com props (exercicios)

npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd criando_component_com_props
  npm start

-------------------------------------------------------------------------------   

- Eventos

    - como o próprio nome já diz, evento é uma ação disparada, quando
    certa ocasião é efetuada, por exemplo onClick(), 
    é um evento aonde pode disparar alguma ação quando ocorrer
    um click em um button, por exemplo

    - https://reactjs.org/docs/handling-events.html

- Passando um evento como parâmetro para outro component

    - com as props, nós vamos passando valores de um component maior 
    para um menor, ou seja, afunilando as informações(fluxo normal)

    - no caso, por exemplo do onClick, para que o mesmo nao dispare somente 
    quando a tela for renderiza, podemos acionar a função, através de uma 
    função anônima
    - passando assim a funcão como uma propriedade

- Renderização condicional
    - realizar uma ação dependendo de uma condição
    - essas ações podem ser aplicadas atraves de condições se 
    baseando inteiramente no return, ou também, somente com 
    base em uma propriedade


- Impedindo o component de renderizar até que uma condição seja atingida
    - simplesmente colocamos uma verificação a ser comtemplada antes mesmo de 
    efetuar a Renderização

- Renderizando multiplos components
    - muitas vezes será necessário renderizar multiplos components baseado em arrays
    - esse processo pode ser efetuado através de um mapeamento do elemento que criamos, 
    em vez de chamarmos a todo o momento o component que criamos

- Renderizando multiplos elementos no JSX

- O que são estados?
    - State é um objeto JavaScript que guarda os dados de um component e determina
    seu comportamento
    - Quando um estado é atualizado o component é re-renderizado

    - Diferença entre props e states
        - Props: são passadas para outros components, ou seja, component pai passa informações
        para o component filho
        - State: Ele pertence a cada component e também quando as props são atualizadas o 
        component vai renderizar novamente e o estado quando atualizado, vai renderizar novamente
        o component 

    - Component de classe vs. component funcional
        -  A pouco tempo atrás, somente os components de classe poderiam usar state e até 
        por isso eram considerados mais importantes, para a parte mais complexa do react
        - Recentemente houve a inserção dos hooks no react, os hooks permitem que os 
        states sejam alterados, desta forma, em component funcional também 
        é possível usar state

        - Declarando um estado em um component de classe

            constructor(props) {
                super(props);
                //state general (object JS)
                this.state = {
                    count: 0
                }
            }

        - Para manipular um component em um component de classe
            
            incrementCount() {
                this.setState((state) => {
                    //forma classica de manipular states in classes
                    return {count: state.count + 1}
                });
            }

        - Para declarar um estado em um component funcional

            import React, { useState } from 'react';

            ...
            // passado nome do estado, metodo para alterar o state
            // passa o use State com o valor de inicialização 
            const [count, setCount] = useState(0);
            ... 

        - Para manipular um component em um component de classe

            // em vez de usar o setState, podem usar o setCount
            setCount(count + 1)



- Criando uma classe com estado
    - para criar determinada classe é preciso deixar no seguinte formato:

        class Planets extends React.Component {
            render() {
                return....
                
            }
        }

    - será necessário a criação de um constructor
        pois é fundamental para as classes, ou seja, 
        onde tudo(classe) será inicializado

        constructor(props) {
            super(props) -> passa as props para a classe que 
            está sendo herdada
        }

    - Exemplo da criação de um state

        this.state = {
            planets: [
                {
                name: "planet name",
                description: "description",
                image_url:"url da imagem",
                link:"link do planet"
                },
                {
                name: "planet name",
                description: "description",
                image_url:"url da imagem",
                link:"link do planet"
                },
            ]
        }

    - Para chamar as propriedades nos devidos lugares, ou seja, 
    no local da chamada dos planetas

        - pode ser feito através do "this.state.planets[0].name" -> passando 
        posição 0, que seria o primeiro planet e seguido do name 
        do planeta e assim por diante

        - Pode ser feito também através do mapeamento, aonde iremos aplicar
        um map da seguinte forma: 

            { this.state.planets.map((planet) => 
                <Planet
                    name = { planet.name }
                    description = { planet.description }
                    image_url = { planet.image_url }
                    link = { planet.link }
                />
            )}

            - desta forma, estaremos passando as informações através do map, 
            para o component Planet e assim, todas as infos serão acessadas
            através do planet.(nome da propriedade), que anteriormente
            era feito da seguinte forma: this.state.planets[i].(nome da
            propriedade), deixando assim o código mais limpo

        - para 'pegar' todas as propriedades => [...this.state.planets], 
        utilizamos o spread ou os ... que é um operador lógico, 
        onde extrai todas as propriedades de um determinado objeto

        - método pop()
            - método desenvolvido para eliminar o último elemento de um array por exemplo.

    - Lifecycle
        - Cada component React tem um ciclo de vida
        - O Component você pode monitorá-los ou manipulá-los durante 3 fases:
            - Mounting: Quando um elemento é colocado no DOM
            - Updating: Quando um component é atualizado(Acontece sempre
            que ocorre uma mudança no estado ou propriedade de um component)
            - Unmounting: Quando um component é removido do DOM

        State and lifecycle
        - https://reactjs.org/docs/state-and-lifecycle.html
        - https://www.w3schools.com/react/react_lifecycle.asp

    - Hooks
        - Os Hooks são uma forma de usarmos state, lifecycle e compartilharmos 
        lógica em components funcionais
        - Eles foram inseridos na versão 16.8

        Exemplo de component com Hook de state

            import React, { useState } from 'react';

            function Example() {
                const [count, setCount] = useState(0);

                return(
                    <div>
                        <p>You clicked {count} times</p>
                        <button onClick={() => setCount(count + 1)}>
                            Click me!
                        </button>
                    </div>
                )
            } 

        Exemplo de component com Hook associado a lifecycle

        import React, { useState, useEffect } from 'react';

        function Example() {
            const [count, setCount] = useState(0);

            //Similar to componentDidMount and componentDidUpdate:
            useEffect(() => {
                //Update the document title using the browser API
                document.title = `You clicked ${count} times`;
            });

            return (
                <div>
                    <p>You clicked {count} times</p>
                    <button onClick={() => setCount(count + 1)}>
                        Click me!
                    </button>
                </div>
            )
        }

    - Porque usar os Hooks?
        - Os components de função são mais fáceis de compreender
        - Hooks nos ajudam a compartilhar lógica entre components

    - Refatorando nosso lifecycle com Hooks
        - nesta parte iniciaremos com o uso do useEffect, aonde 
        inicialmente é preciso importar ele
        - o useEffect é um método que roda tanto no  
        componentDidMount, ou seja, quando o component é 
        preparado para aparecer na tela e com o componentDidUpdate, 
        que é rodado sempre que um estado é atualizado

        - quando é para executar/rodar o useEffect apenas uma vez, 
        ou seja, quando é montado, pode passar um array vazio como parâmetro 
        para o useEffect, caso contrario, se quiser que seja atualizado, 
        sempre que um estado for atualizado, basta passar o mesmo como 
        parâmetro

    - Controlled e Uncontrolled Components
        - Uncontrolled component: em geral é um component que tem seus dados 
        gerenciados pelo próprio DOM (como um input normal) sem relação
        com o state do component

        exemplo:
        
        import React from 'react'

        const Form = () => {
            return (
                <div>
                    <label htmlFor="name">Name: </label>
                    <input type="text" id="name" />
                </div>
            )
        }

        export default Form;

        - Controlled Component: components controlados estão associados
        aos estados do component, ou seja, eles exibem informações
        baseadas no state e quando alterados alteram também o state.

        exemplo: 

        import React, { useState } from 'react'

        const Form = () => {
            const [name, setName] = useState('');
            const handleChange = (e) => setName(e.currentTarget.value)

            return (
                <div>
                    <label htmlFor="name">Name: </label>
                    <input type="text" id="name" value={name} onChange(handleChange) />
                </div>
            )
        }

        export default Form;

        -> Maneira mais indicada de criar forms é através dos Controlled
        Components
        -> Esta maneira ajuda bastante, porque depois você simplesmente pode 
        enviar o valor do seu state como o valor do 'form', não precisando
        capturar de uma forma diferente depois 


        

=> Navegação programática
    - quando você quer mudar de uma page pra outra, mas não quer que seja através de um click de um user, vamos dizer que você chame uma determinada API
    e de um erro, sendo assim, você deseja que seja redirecionado para uma outra page, ou tambem, depois de um determinado tempo num contador, 
    seja redirecionado para uma page, sem que ele mesmo click em nada.